package main

import "fmt"

/**
请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof
*/

func main() {
	fmt.Println(hammingWeight(2))
}

//暴力法，先转化成二进制，再转化成字符串，然后返回。
//func hammingWeight(num uint32) int {
//
//}

//看别人的思路，通过n&1来判断是否有1
//n&1 = 1 的话，则N的最右边值绝对为1
//n&1 = 0 的话，则N的最右边值绝对为0
func hammingWeight(num uint32) int {
	res := 0

	for num >= 1 {
		res += int(num & 1)
		num = num >> 1
	}
	return res
}
